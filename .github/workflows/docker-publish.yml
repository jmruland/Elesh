name: Build and Publish Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Read current version
      id: get-version
      run: |
        CURRENT=$(cat VERSION)
        COMMIT_MSG=$(git log -1 --pretty=%B)

        echo "Current VERSION: $CURRENT"
        echo "Commit message: $COMMIT_MSG"

        # Check if commit message includes Release: x.y.z
        if [[ "$COMMIT_MSG" =~ Release:\ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
          NEW_VERSION="${BASH_REMATCH[1]}"
          echo "Using version from commit message: $NEW_VERSION"

        # Check if the VERSION file was manually updated
        elif git diff-tree --no-commit-id --name-only -r HEAD | grep -q '^VERSION$'; then
          NEW_VERSION="$CURRENT"
          echo "Using manually set VERSION file: $NEW_VERSION"

        # Otherwise auto-bump patch version
        else
          MAJOR=$(echo "$CURRENT" | cut -d. -f1)
          MINOR=$(echo "$CURRENT" | cut -d. -f2)
          PATCH=$(echo "$CURRENT" | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > VERSION

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "Auto-bump version to $NEW_VERSION"
          git push
          echo "Auto-bumped patch version to $NEW_VERSION"
        fi

        echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          yourdockerhubuser/elesh-archivist:latest
          yourdockerhubuser/elesh-archivist:${{ steps.get-version.outputs.version }}